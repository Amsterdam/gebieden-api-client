# coding: utf-8

"""
    gebieden

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from gebieden_api_client.models.gebiedenggwgebieden import Gebiedenggwgebieden
from gebieden_api_client.models.paginated_gebiedenggwgebieden_list import PaginatedGebiedenggwgebiedenList

from gebieden_api_client.api_client import ApiClient, RequestSerialized
from gebieden_api_client.api_response import ApiResponse
from gebieden_api_client.rest import RESTResponseType


class GgwgebiedenApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def gebieden_ggwgebieden_list(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedGebiedenggwgebiedenList:
        """gebieden_ggwgebieden_list

        Gebiedsgericht werken is een manier om breed samenwerken in de stad te verbeteren tussen  gemeente, bewoners, ondernemers, (lokale) partners en maatschappelijke organisaties

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Exact; text
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenggwgebiedenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def gebieden_ggwgebieden_list_with_http_info(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedGebiedenggwgebiedenList]:
        """gebieden_ggwgebieden_list

        Gebiedsgericht werken is een manier om breed samenwerken in de stad te verbeteren tussen  gemeente, bewoners, ondernemers, (lokale) partners en maatschappelijke organisaties

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Exact; text
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenggwgebiedenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def gebieden_ggwgebieden_list_without_preload_content(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gebieden_ggwgebieden_list

        Gebiedsgericht werken is een manier om breed samenwerken in de stad te verbeteren tussen  gemeente, bewoners, ondernemers, (lokale) partners en maatschappelijke organisaties

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id: Exact; text
        :type id: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id=id,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenggwgebiedenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gebieden_ggwgebieden_list_serialize(
        self,
        accept_crs,
        content_crs,
        x_api_key,
        count,
        expand,
        expand_scope,
        fields,
        format,
        page_size,
        sort,
        begin_geldigheid,
        begin_geldigheid_gt,
        begin_geldigheid_gte,
        begin_geldigheid_in,
        begin_geldigheid_isnull,
        begin_geldigheid_lt,
        begin_geldigheid_lte,
        begin_geldigheid_not,
        bestaat_uit_buurten_identificatie,
        bestaat_uit_buurten_identificatie_in,
        bestaat_uit_buurten_identificatie_isempty,
        bestaat_uit_buurten_identificatie_isnull,
        bestaat_uit_buurten_identificatie_like,
        bestaat_uit_buurten_identificatie_not,
        bestaat_uit_buurten_volgnummer,
        bestaat_uit_buurten_volgnummer_gt,
        bestaat_uit_buurten_volgnummer_gte,
        bestaat_uit_buurten_volgnummer_in,
        bestaat_uit_buurten_volgnummer_isnull,
        bestaat_uit_buurten_volgnummer_lt,
        bestaat_uit_buurten_volgnummer_lte,
        bestaat_uit_buurten_volgnummer_not,
        code,
        code_in,
        code_isempty,
        code_isnull,
        code_like,
        code_not,
        documentdatum,
        documentdatum_gt,
        documentdatum_gte,
        documentdatum_in,
        documentdatum_isnull,
        documentdatum_lt,
        documentdatum_lte,
        documentdatum_not,
        documentnummer,
        documentnummer_in,
        documentnummer_isempty,
        documentnummer_isnull,
        documentnummer_like,
        documentnummer_not,
        eind_geldigheid,
        eind_geldigheid_gt,
        eind_geldigheid_gte,
        eind_geldigheid_in,
        eind_geldigheid_isnull,
        eind_geldigheid_lt,
        eind_geldigheid_lte,
        eind_geldigheid_not,
        geldig_op,
        geldig_op_gt,
        geldig_op_gte,
        geldig_op_in,
        geldig_op_isnull,
        geldig_op_lt,
        geldig_op_lte,
        geldig_op_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        identificatie,
        identificatie_in,
        identificatie_isempty,
        identificatie_isnull,
        identificatie_like,
        identificatie_not,
        ligt_in_stadsdeel_identificatie,
        ligt_in_stadsdeel_identificatie_in,
        ligt_in_stadsdeel_identificatie_isempty,
        ligt_in_stadsdeel_identificatie_isnull,
        ligt_in_stadsdeel_identificatie_like,
        ligt_in_stadsdeel_identificatie_not,
        ligt_in_stadsdeel_volgnummer,
        ligt_in_stadsdeel_volgnummer_gt,
        ligt_in_stadsdeel_volgnummer_gte,
        ligt_in_stadsdeel_volgnummer_in,
        ligt_in_stadsdeel_volgnummer_isnull,
        ligt_in_stadsdeel_volgnummer_lt,
        ligt_in_stadsdeel_volgnummer_lte,
        ligt_in_stadsdeel_volgnummer_not,
        naam,
        naam_in,
        naam_isempty,
        naam_isnull,
        naam_like,
        naam_not,
        page,
        registratiedatum,
        registratiedatum_gt,
        registratiedatum_gte,
        registratiedatum_in,
        registratiedatum_isnull,
        registratiedatum_lt,
        registratiedatum_lte,
        registratiedatum_not,
        volgnummer,
        volgnummer_gt,
        volgnummer_gte,
        volgnummer_in,
        volgnummer_isnull,
        volgnummer_lt,
        volgnummer_lte,
        volgnummer_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'beginGeldigheid[in]': 'csv',
            'beginGeldigheid[not]': 'multi',
            'bestaatUitBuurten.identificatie[in]': 'csv',
            'bestaatUitBuurten.identificatie[not]': 'multi',
            'bestaatUitBuurten.volgnummer[in]': 'csv',
            'bestaatUitBuurten.volgnummer[not]': 'multi',
            'code[in]': 'csv',
            'code[not]': 'multi',
            'documentdatum[in]': 'csv',
            'documentdatum[not]': 'multi',
            'documentnummer[in]': 'csv',
            'documentnummer[not]': 'multi',
            'eindGeldigheid[in]': 'csv',
            'eindGeldigheid[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'identificatie[in]': 'csv',
            'identificatie[not]': 'multi',
            'ligtInStadsdeel.identificatie[in]': 'csv',
            'ligtInStadsdeel.identificatie[not]': 'multi',
            'ligtInStadsdeel.volgnummer[in]': 'csv',
            'ligtInStadsdeel.volgnummer[not]': 'multi',
            'naam[in]': 'csv',
            'naam[not]': 'multi',
            'registratiedatum[in]': 'csv',
            'registratiedatum[not]': 'multi',
            'volgnummer[in]': 'csv',
            'volgnummer[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('_count', count))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if page_size is not None:
            
            _query_params.append(('_pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if begin_geldigheid is not None:
            if isinstance(begin_geldigheid, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid',
                        begin_geldigheid.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid', begin_geldigheid))
            
        if begin_geldigheid_gt is not None:
            if isinstance(begin_geldigheid_gt, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[gt]',
                        begin_geldigheid_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[gt]', begin_geldigheid_gt))
            
        if begin_geldigheid_gte is not None:
            if isinstance(begin_geldigheid_gte, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[gte]',
                        begin_geldigheid_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[gte]', begin_geldigheid_gte))
            
        if begin_geldigheid_in is not None:
            
            _query_params.append(('beginGeldigheid[in]', begin_geldigheid_in))
            
        if begin_geldigheid_isnull is not None:
            
            _query_params.append(('beginGeldigheid[isnull]', begin_geldigheid_isnull))
            
        if begin_geldigheid_lt is not None:
            if isinstance(begin_geldigheid_lt, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[lt]',
                        begin_geldigheid_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[lt]', begin_geldigheid_lt))
            
        if begin_geldigheid_lte is not None:
            if isinstance(begin_geldigheid_lte, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[lte]',
                        begin_geldigheid_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[lte]', begin_geldigheid_lte))
            
        if begin_geldigheid_not is not None:
            
            _query_params.append(('beginGeldigheid[not]', begin_geldigheid_not))
            
        if bestaat_uit_buurten_identificatie is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie', bestaat_uit_buurten_identificatie))
            
        if bestaat_uit_buurten_identificatie_in is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[in]', bestaat_uit_buurten_identificatie_in))
            
        if bestaat_uit_buurten_identificatie_isempty is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[isempty]', bestaat_uit_buurten_identificatie_isempty))
            
        if bestaat_uit_buurten_identificatie_isnull is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[isnull]', bestaat_uit_buurten_identificatie_isnull))
            
        if bestaat_uit_buurten_identificatie_like is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[like]', bestaat_uit_buurten_identificatie_like))
            
        if bestaat_uit_buurten_identificatie_not is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[not]', bestaat_uit_buurten_identificatie_not))
            
        if bestaat_uit_buurten_volgnummer is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer', bestaat_uit_buurten_volgnummer))
            
        if bestaat_uit_buurten_volgnummer_gt is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[gt]', bestaat_uit_buurten_volgnummer_gt))
            
        if bestaat_uit_buurten_volgnummer_gte is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[gte]', bestaat_uit_buurten_volgnummer_gte))
            
        if bestaat_uit_buurten_volgnummer_in is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[in]', bestaat_uit_buurten_volgnummer_in))
            
        if bestaat_uit_buurten_volgnummer_isnull is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[isnull]', bestaat_uit_buurten_volgnummer_isnull))
            
        if bestaat_uit_buurten_volgnummer_lt is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[lt]', bestaat_uit_buurten_volgnummer_lt))
            
        if bestaat_uit_buurten_volgnummer_lte is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[lte]', bestaat_uit_buurten_volgnummer_lte))
            
        if bestaat_uit_buurten_volgnummer_not is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[not]', bestaat_uit_buurten_volgnummer_not))
            
        if code is not None:
            
            _query_params.append(('code', code))
            
        if code_in is not None:
            
            _query_params.append(('code[in]', code_in))
            
        if code_isempty is not None:
            
            _query_params.append(('code[isempty]', code_isempty))
            
        if code_isnull is not None:
            
            _query_params.append(('code[isnull]', code_isnull))
            
        if code_like is not None:
            
            _query_params.append(('code[like]', code_like))
            
        if code_not is not None:
            
            _query_params.append(('code[not]', code_not))
            
        if documentdatum is not None:
            if isinstance(documentdatum, date):
                _query_params.append(
                    (
                        'documentdatum',
                        documentdatum.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum', documentdatum))
            
        if documentdatum_gt is not None:
            if isinstance(documentdatum_gt, date):
                _query_params.append(
                    (
                        'documentdatum[gt]',
                        documentdatum_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[gt]', documentdatum_gt))
            
        if documentdatum_gte is not None:
            if isinstance(documentdatum_gte, date):
                _query_params.append(
                    (
                        'documentdatum[gte]',
                        documentdatum_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[gte]', documentdatum_gte))
            
        if documentdatum_in is not None:
            
            _query_params.append(('documentdatum[in]', documentdatum_in))
            
        if documentdatum_isnull is not None:
            
            _query_params.append(('documentdatum[isnull]', documentdatum_isnull))
            
        if documentdatum_lt is not None:
            if isinstance(documentdatum_lt, date):
                _query_params.append(
                    (
                        'documentdatum[lt]',
                        documentdatum_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[lt]', documentdatum_lt))
            
        if documentdatum_lte is not None:
            if isinstance(documentdatum_lte, date):
                _query_params.append(
                    (
                        'documentdatum[lte]',
                        documentdatum_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[lte]', documentdatum_lte))
            
        if documentdatum_not is not None:
            
            _query_params.append(('documentdatum[not]', documentdatum_not))
            
        if documentnummer is not None:
            
            _query_params.append(('documentnummer', documentnummer))
            
        if documentnummer_in is not None:
            
            _query_params.append(('documentnummer[in]', documentnummer_in))
            
        if documentnummer_isempty is not None:
            
            _query_params.append(('documentnummer[isempty]', documentnummer_isempty))
            
        if documentnummer_isnull is not None:
            
            _query_params.append(('documentnummer[isnull]', documentnummer_isnull))
            
        if documentnummer_like is not None:
            
            _query_params.append(('documentnummer[like]', documentnummer_like))
            
        if documentnummer_not is not None:
            
            _query_params.append(('documentnummer[not]', documentnummer_not))
            
        if eind_geldigheid is not None:
            if isinstance(eind_geldigheid, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid',
                        eind_geldigheid.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid', eind_geldigheid))
            
        if eind_geldigheid_gt is not None:
            if isinstance(eind_geldigheid_gt, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[gt]',
                        eind_geldigheid_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[gt]', eind_geldigheid_gt))
            
        if eind_geldigheid_gte is not None:
            if isinstance(eind_geldigheid_gte, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[gte]',
                        eind_geldigheid_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[gte]', eind_geldigheid_gte))
            
        if eind_geldigheid_in is not None:
            
            _query_params.append(('eindGeldigheid[in]', eind_geldigheid_in))
            
        if eind_geldigheid_isnull is not None:
            
            _query_params.append(('eindGeldigheid[isnull]', eind_geldigheid_isnull))
            
        if eind_geldigheid_lt is not None:
            if isinstance(eind_geldigheid_lt, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[lt]',
                        eind_geldigheid_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[lt]', eind_geldigheid_lt))
            
        if eind_geldigheid_lte is not None:
            if isinstance(eind_geldigheid_lte, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[lte]',
                        eind_geldigheid_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[lte]', eind_geldigheid_lte))
            
        if eind_geldigheid_not is not None:
            
            _query_params.append(('eindGeldigheid[not]', eind_geldigheid_not))
            
        if geldig_op is not None:
            if isinstance(geldig_op, datetime):
                _query_params.append(
                    (
                        'geldigOp',
                        geldig_op.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp', geldig_op))
            
        if geldig_op_gt is not None:
            if isinstance(geldig_op_gt, datetime):
                _query_params.append(
                    (
                        'geldigOp[gt]',
                        geldig_op_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[gt]', geldig_op_gt))
            
        if geldig_op_gte is not None:
            if isinstance(geldig_op_gte, datetime):
                _query_params.append(
                    (
                        'geldigOp[gte]',
                        geldig_op_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[gte]', geldig_op_gte))
            
        if geldig_op_in is not None:
            if isinstance(geldig_op_in, datetime):
                _query_params.append(
                    (
                        'geldigOp[in]',
                        geldig_op_in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[in]', geldig_op_in))
            
        if geldig_op_isnull is not None:
            if isinstance(geldig_op_isnull, datetime):
                _query_params.append(
                    (
                        'geldigOp[isnull]',
                        geldig_op_isnull.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[isnull]', geldig_op_isnull))
            
        if geldig_op_lt is not None:
            if isinstance(geldig_op_lt, datetime):
                _query_params.append(
                    (
                        'geldigOp[lt]',
                        geldig_op_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[lt]', geldig_op_lt))
            
        if geldig_op_lte is not None:
            if isinstance(geldig_op_lte, datetime):
                _query_params.append(
                    (
                        'geldigOp[lte]',
                        geldig_op_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[lte]', geldig_op_lte))
            
        if geldig_op_not is not None:
            if isinstance(geldig_op_not, datetime):
                _query_params.append(
                    (
                        'geldigOp[not]',
                        geldig_op_not.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[not]', geldig_op_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if identificatie is not None:
            
            _query_params.append(('identificatie', identificatie))
            
        if identificatie_in is not None:
            
            _query_params.append(('identificatie[in]', identificatie_in))
            
        if identificatie_isempty is not None:
            
            _query_params.append(('identificatie[isempty]', identificatie_isempty))
            
        if identificatie_isnull is not None:
            
            _query_params.append(('identificatie[isnull]', identificatie_isnull))
            
        if identificatie_like is not None:
            
            _query_params.append(('identificatie[like]', identificatie_like))
            
        if identificatie_not is not None:
            
            _query_params.append(('identificatie[not]', identificatie_not))
            
        if ligt_in_stadsdeel_identificatie is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie', ligt_in_stadsdeel_identificatie))
            
        if ligt_in_stadsdeel_identificatie_in is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[in]', ligt_in_stadsdeel_identificatie_in))
            
        if ligt_in_stadsdeel_identificatie_isempty is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[isempty]', ligt_in_stadsdeel_identificatie_isempty))
            
        if ligt_in_stadsdeel_identificatie_isnull is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[isnull]', ligt_in_stadsdeel_identificatie_isnull))
            
        if ligt_in_stadsdeel_identificatie_like is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[like]', ligt_in_stadsdeel_identificatie_like))
            
        if ligt_in_stadsdeel_identificatie_not is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[not]', ligt_in_stadsdeel_identificatie_not))
            
        if ligt_in_stadsdeel_volgnummer is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer', ligt_in_stadsdeel_volgnummer))
            
        if ligt_in_stadsdeel_volgnummer_gt is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[gt]', ligt_in_stadsdeel_volgnummer_gt))
            
        if ligt_in_stadsdeel_volgnummer_gte is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[gte]', ligt_in_stadsdeel_volgnummer_gte))
            
        if ligt_in_stadsdeel_volgnummer_in is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[in]', ligt_in_stadsdeel_volgnummer_in))
            
        if ligt_in_stadsdeel_volgnummer_isnull is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[isnull]', ligt_in_stadsdeel_volgnummer_isnull))
            
        if ligt_in_stadsdeel_volgnummer_lt is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[lt]', ligt_in_stadsdeel_volgnummer_lt))
            
        if ligt_in_stadsdeel_volgnummer_lte is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[lte]', ligt_in_stadsdeel_volgnummer_lte))
            
        if ligt_in_stadsdeel_volgnummer_not is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[not]', ligt_in_stadsdeel_volgnummer_not))
            
        if naam is not None:
            
            _query_params.append(('naam', naam))
            
        if naam_in is not None:
            
            _query_params.append(('naam[in]', naam_in))
            
        if naam_isempty is not None:
            
            _query_params.append(('naam[isempty]', naam_isempty))
            
        if naam_isnull is not None:
            
            _query_params.append(('naam[isnull]', naam_isnull))
            
        if naam_like is not None:
            
            _query_params.append(('naam[like]', naam_like))
            
        if naam_not is not None:
            
            _query_params.append(('naam[not]', naam_not))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if registratiedatum is not None:
            if isinstance(registratiedatum, datetime):
                _query_params.append(
                    (
                        'registratiedatum',
                        registratiedatum.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum', registratiedatum))
            
        if registratiedatum_gt is not None:
            if isinstance(registratiedatum_gt, datetime):
                _query_params.append(
                    (
                        'registratiedatum[gt]',
                        registratiedatum_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[gt]', registratiedatum_gt))
            
        if registratiedatum_gte is not None:
            if isinstance(registratiedatum_gte, datetime):
                _query_params.append(
                    (
                        'registratiedatum[gte]',
                        registratiedatum_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[gte]', registratiedatum_gte))
            
        if registratiedatum_in is not None:
            
            _query_params.append(('registratiedatum[in]', registratiedatum_in))
            
        if registratiedatum_isnull is not None:
            
            _query_params.append(('registratiedatum[isnull]', registratiedatum_isnull))
            
        if registratiedatum_lt is not None:
            if isinstance(registratiedatum_lt, datetime):
                _query_params.append(
                    (
                        'registratiedatum[lt]',
                        registratiedatum_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[lt]', registratiedatum_lt))
            
        if registratiedatum_lte is not None:
            if isinstance(registratiedatum_lte, datetime):
                _query_params.append(
                    (
                        'registratiedatum[lte]',
                        registratiedatum_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[lte]', registratiedatum_lte))
            
        if registratiedatum_not is not None:
            
            _query_params.append(('registratiedatum[not]', registratiedatum_not))
            
        if volgnummer is not None:
            
            _query_params.append(('volgnummer', volgnummer))
            
        if volgnummer_gt is not None:
            
            _query_params.append(('volgnummer[gt]', volgnummer_gt))
            
        if volgnummer_gte is not None:
            
            _query_params.append(('volgnummer[gte]', volgnummer_gte))
            
        if volgnummer_in is not None:
            
            _query_params.append(('volgnummer[in]', volgnummer_in))
            
        if volgnummer_isnull is not None:
            
            _query_params.append(('volgnummer[isnull]', volgnummer_isnull))
            
        if volgnummer_lt is not None:
            
            _query_params.append(('volgnummer[lt]', volgnummer_lt))
            
        if volgnummer_lte is not None:
            
            _query_params.append(('volgnummer[lte]', volgnummer_lte))
            
        if volgnummer_not is not None:
            
            _query_params.append(('volgnummer[not]', volgnummer_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gebieden/ggwgebieden/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def gebieden_ggwgebieden_retrieve(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Gebiedenggwgebieden:
        """gebieden_ggwgebieden_retrieve


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Exact; text
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_retrieve_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenggwgebieden",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def gebieden_ggwgebieden_retrieve_with_http_info(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Gebiedenggwgebieden]:
        """gebieden_ggwgebieden_retrieve


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Exact; text
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_retrieve_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenggwgebieden",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def gebieden_ggwgebieden_retrieve_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True)],
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        begin_geldigheid: Annotated[Optional[datetime], Field(description="De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        begin_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        begin_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        begin_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        begin_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        bestaat_uit_buurten_identificatie: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        bestaat_uit_buurten_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        bestaat_uit_buurten_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        bestaat_uit_buurten_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        bestaat_uit_buurten_volgnummer: Annotated[Optional[StrictInt], Field(description="Exact; number")] = None,
        bestaat_uit_buurten_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        bestaat_uit_buurten_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        bestaat_uit_buurten_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        bestaat_uit_buurten_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        bestaat_uit_buurten_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        bestaat_uit_buurten_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        code: Annotated[Optional[StrictStr], Field(description="OfficiÃ«le code van het object")] = None,
        code_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        code_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        code_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        code_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        code_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        documentdatum: Annotated[Optional[date], Field(description="De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentdatum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        documentdatum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentdatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentdatum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        documentdatum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        documentdatum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        documentnummer: Annotated[Optional[StrictStr], Field(description="Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden")] = None,
        documentnummer_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        documentnummer_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        documentnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        documentnummer_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        documentnummer_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        eind_geldigheid: Annotated[Optional[datetime], Field(description="De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied")] = None,
        eind_geldigheid_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        eind_geldigheid_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        eind_geldigheid_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        eind_geldigheid_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        geldig_op: Optional[datetime] = None,
        geldig_op_gt: Optional[datetime] = None,
        geldig_op_gte: Optional[datetime] = None,
        geldig_op_in: Optional[datetime] = None,
        geldig_op_isnull: Optional[datetime] = None,
        geldig_op_lt: Optional[datetime] = None,
        geldig_op_lte: Optional[datetime] = None,
        geldig_op_not: Optional[datetime] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        id2: Annotated[Optional[StrictStr], Field(description="Exact; text")] = None,
        id_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        id_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        id_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        id_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        id_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        ligt_in_stadsdeel_identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        ligt_in_stadsdeel_identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        ligt_in_stadsdeel_identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        ligt_in_stadsdeel_volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        ligt_in_stadsdeel_volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        ligt_in_stadsdeel_volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        ligt_in_stadsdeel_volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        ligt_in_stadsdeel_volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        ligt_in_stadsdeel_volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        ligt_in_stadsdeel_volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        registratiedatum: Annotated[Optional[datetime], Field(description="De datum waarop een gegeven in de bron is geregistreerd")] = None,
        registratiedatum_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        registratiedatum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        registratiedatum_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        registratiedatum_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        volgnummer: Annotated[Optional[StrictInt], Field(description="Uniek volgnummer van de toestand van het object")] = None,
        volgnummer_gt: Annotated[Optional[StrictInt], Field(description="Greater than; number")] = None,
        volgnummer_gte: Annotated[Optional[StrictInt], Field(description="Greater than or equal to; number")] = None,
        volgnummer_in: Annotated[Optional[List[StrictInt]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        volgnummer_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        volgnummer_lt: Annotated[Optional[StrictInt], Field(description="Less than; number")] = None,
        volgnummer_lte: Annotated[Optional[StrictInt], Field(description="Less than or equal to; number")] = None,
        volgnummer_not: Annotated[Optional[List[StrictInt]], Field(description="Exclude matches; number")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gebieden_ggwgebieden_retrieve


        :param id: (required)
        :type id: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param begin_geldigheid: De ingangsdatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type begin_geldigheid: datetime
        :param begin_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gt: datetime
        :param begin_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_gte: datetime
        :param begin_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type begin_geldigheid_in: List[datetime]
        :param begin_geldigheid_isnull: Whether the field has a NULL value or not.
        :type begin_geldigheid_isnull: bool
        :param begin_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lt: datetime
        :param begin_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_lte: datetime
        :param begin_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type begin_geldigheid_not: List[datetime]
        :param bestaat_uit_buurten_identificatie: Exact; text
        :type bestaat_uit_buurten_identificatie: str
        :param bestaat_uit_buurten_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_identificatie_in: List[str]
        :param bestaat_uit_buurten_identificatie_isempty: Whether the field is empty or not.
        :type bestaat_uit_buurten_identificatie_isempty: bool
        :param bestaat_uit_buurten_identificatie_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_identificatie_isnull: bool
        :param bestaat_uit_buurten_identificatie_like: Matches text using wildcards (? and *).
        :type bestaat_uit_buurten_identificatie_like: str
        :param bestaat_uit_buurten_identificatie_not: Exclude matches; text
        :type bestaat_uit_buurten_identificatie_not: List[str]
        :param bestaat_uit_buurten_volgnummer: Exact; number
        :type bestaat_uit_buurten_volgnummer: int
        :param bestaat_uit_buurten_volgnummer_gt: Greater than; number
        :type bestaat_uit_buurten_volgnummer_gt: int
        :param bestaat_uit_buurten_volgnummer_gte: Greater than or equal to; number
        :type bestaat_uit_buurten_volgnummer_gte: int
        :param bestaat_uit_buurten_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type bestaat_uit_buurten_volgnummer_in: List[int]
        :param bestaat_uit_buurten_volgnummer_isnull: Whether the field has a NULL value or not.
        :type bestaat_uit_buurten_volgnummer_isnull: bool
        :param bestaat_uit_buurten_volgnummer_lt: Less than; number
        :type bestaat_uit_buurten_volgnummer_lt: int
        :param bestaat_uit_buurten_volgnummer_lte: Less than or equal to; number
        :type bestaat_uit_buurten_volgnummer_lte: int
        :param bestaat_uit_buurten_volgnummer_not: Exclude matches; number
        :type bestaat_uit_buurten_volgnummer_not: List[int]
        :param code: OfficiÃ«le code van het object
        :type code: str
        :param code_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type code_in: List[str]
        :param code_isempty: Whether the field is empty or not.
        :type code_isempty: bool
        :param code_isnull: Whether the field has a NULL value or not.
        :type code_isnull: bool
        :param code_like: Matches text using wildcards (? and *).
        :type code_like: str
        :param code_not: Exclude matches; text
        :type code_not: List[str]
        :param documentdatum: De datum waarop het document is vastgesteld, op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentdatum: date
        :param documentdatum_gt: Greater than; use yyyy-mm-dd
        :type documentdatum_gt: date
        :param documentdatum_gte: Greater than or equal to; use yyyy-mm-dd
        :type documentdatum_gte: date
        :param documentdatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentdatum_in: List[date]
        :param documentdatum_isnull: Whether the field has a NULL value or not.
        :type documentdatum_isnull: bool
        :param documentdatum_lt: Less than; use yyyy-mm-dd
        :type documentdatum_lt: date
        :param documentdatum_lte: Less than or equal to; use yyyy-mm-dd
        :type documentdatum_lte: date
        :param documentdatum_not: Exclude matches; use yyyy-mm-dd
        :type documentdatum_not: List[date]
        :param documentnummer: Unieke aanduiding van het brondocument op basis waarvan een opname, mutatie of een verwijdering van gegevens ten aanzien van het object heeft plaatsgevonden
        :type documentnummer: str
        :param documentnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type documentnummer_in: List[str]
        :param documentnummer_isempty: Whether the field is empty or not.
        :type documentnummer_isempty: bool
        :param documentnummer_isnull: Whether the field has a NULL value or not.
        :type documentnummer_isnull: bool
        :param documentnummer_like: Matches text using wildcards (? and *).
        :type documentnummer_like: str
        :param documentnummer_not: Exclude matches; text
        :type documentnummer_not: List[str]
        :param eind_geldigheid: De einddatum van de geldigheid van een bepaalde combinatie van gegevens over een gebied
        :type eind_geldigheid: datetime
        :param eind_geldigheid_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gt: datetime
        :param eind_geldigheid_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_gte: datetime
        :param eind_geldigheid_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type eind_geldigheid_in: List[datetime]
        :param eind_geldigheid_isnull: Whether the field has a NULL value or not.
        :type eind_geldigheid_isnull: bool
        :param eind_geldigheid_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lt: datetime
        :param eind_geldigheid_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_lte: datetime
        :param eind_geldigheid_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type eind_geldigheid_not: List[datetime]
        :param geldig_op:
        :type geldig_op: datetime
        :param geldig_op_gt:
        :type geldig_op_gt: datetime
        :param geldig_op_gte:
        :type geldig_op_gte: datetime
        :param geldig_op_in:
        :type geldig_op_in: datetime
        :param geldig_op_isnull:
        :type geldig_op_isnull: datetime
        :param geldig_op_lt:
        :type geldig_op_lt: datetime
        :param geldig_op_lte:
        :type geldig_op_lte: datetime
        :param geldig_op_not:
        :type geldig_op_not: datetime
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param id2: Exact; text
        :type id2: str
        :param id_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type id_in: List[str]
        :param id_isempty: Whether the field is empty or not.
        :type id_isempty: bool
        :param id_isnull: Whether the field has a NULL value or not.
        :type id_isnull: bool
        :param id_like: Matches text using wildcards (? and *).
        :type id_like: str
        :param id_not: Exclude matches; text
        :type id_not: List[str]
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param ligt_in_stadsdeel_identificatie: Unieke identificatie van het object
        :type ligt_in_stadsdeel_identificatie: str
        :param ligt_in_stadsdeel_identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_identificatie_in: List[str]
        :param ligt_in_stadsdeel_identificatie_isempty: Whether the field is empty or not.
        :type ligt_in_stadsdeel_identificatie_isempty: bool
        :param ligt_in_stadsdeel_identificatie_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_identificatie_isnull: bool
        :param ligt_in_stadsdeel_identificatie_like: Matches text using wildcards (? and *).
        :type ligt_in_stadsdeel_identificatie_like: str
        :param ligt_in_stadsdeel_identificatie_not: Exclude matches; text
        :type ligt_in_stadsdeel_identificatie_not: List[str]
        :param ligt_in_stadsdeel_volgnummer: Uniek volgnummer van de toestand van het object
        :type ligt_in_stadsdeel_volgnummer: int
        :param ligt_in_stadsdeel_volgnummer_gt: Greater than; number
        :type ligt_in_stadsdeel_volgnummer_gt: int
        :param ligt_in_stadsdeel_volgnummer_gte: Greater than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_gte: int
        :param ligt_in_stadsdeel_volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type ligt_in_stadsdeel_volgnummer_in: List[int]
        :param ligt_in_stadsdeel_volgnummer_isnull: Whether the field has a NULL value or not.
        :type ligt_in_stadsdeel_volgnummer_isnull: bool
        :param ligt_in_stadsdeel_volgnummer_lt: Less than; number
        :type ligt_in_stadsdeel_volgnummer_lt: int
        :param ligt_in_stadsdeel_volgnummer_lte: Less than or equal to; number
        :type ligt_in_stadsdeel_volgnummer_lte: int
        :param ligt_in_stadsdeel_volgnummer_not: Exclude matches; number
        :type ligt_in_stadsdeel_volgnummer_not: List[int]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param registratiedatum: De datum waarop een gegeven in de bron is geregistreerd
        :type registratiedatum: datetime
        :param registratiedatum_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gt: datetime
        :param registratiedatum_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_gte: datetime
        :param registratiedatum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type registratiedatum_in: List[datetime]
        :param registratiedatum_isnull: Whether the field has a NULL value or not.
        :type registratiedatum_isnull: bool
        :param registratiedatum_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lt: datetime
        :param registratiedatum_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_lte: datetime
        :param registratiedatum_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type registratiedatum_not: List[datetime]
        :param volgnummer: Uniek volgnummer van de toestand van het object
        :type volgnummer: int
        :param volgnummer_gt: Greater than; number
        :type volgnummer_gt: int
        :param volgnummer_gte: Greater than or equal to; number
        :type volgnummer_gte: int
        :param volgnummer_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type volgnummer_in: List[int]
        :param volgnummer_isnull: Whether the field has a NULL value or not.
        :type volgnummer_isnull: bool
        :param volgnummer_lt: Less than; number
        :type volgnummer_lt: int
        :param volgnummer_lte: Less than or equal to; number
        :type volgnummer_lte: int
        :param volgnummer_not: Exclude matches; number
        :type volgnummer_not: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_ggwgebieden_retrieve_serialize(
            id=id,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            begin_geldigheid=begin_geldigheid,
            begin_geldigheid_gt=begin_geldigheid_gt,
            begin_geldigheid_gte=begin_geldigheid_gte,
            begin_geldigheid_in=begin_geldigheid_in,
            begin_geldigheid_isnull=begin_geldigheid_isnull,
            begin_geldigheid_lt=begin_geldigheid_lt,
            begin_geldigheid_lte=begin_geldigheid_lte,
            begin_geldigheid_not=begin_geldigheid_not,
            bestaat_uit_buurten_identificatie=bestaat_uit_buurten_identificatie,
            bestaat_uit_buurten_identificatie_in=bestaat_uit_buurten_identificatie_in,
            bestaat_uit_buurten_identificatie_isempty=bestaat_uit_buurten_identificatie_isempty,
            bestaat_uit_buurten_identificatie_isnull=bestaat_uit_buurten_identificatie_isnull,
            bestaat_uit_buurten_identificatie_like=bestaat_uit_buurten_identificatie_like,
            bestaat_uit_buurten_identificatie_not=bestaat_uit_buurten_identificatie_not,
            bestaat_uit_buurten_volgnummer=bestaat_uit_buurten_volgnummer,
            bestaat_uit_buurten_volgnummer_gt=bestaat_uit_buurten_volgnummer_gt,
            bestaat_uit_buurten_volgnummer_gte=bestaat_uit_buurten_volgnummer_gte,
            bestaat_uit_buurten_volgnummer_in=bestaat_uit_buurten_volgnummer_in,
            bestaat_uit_buurten_volgnummer_isnull=bestaat_uit_buurten_volgnummer_isnull,
            bestaat_uit_buurten_volgnummer_lt=bestaat_uit_buurten_volgnummer_lt,
            bestaat_uit_buurten_volgnummer_lte=bestaat_uit_buurten_volgnummer_lte,
            bestaat_uit_buurten_volgnummer_not=bestaat_uit_buurten_volgnummer_not,
            code=code,
            code_in=code_in,
            code_isempty=code_isempty,
            code_isnull=code_isnull,
            code_like=code_like,
            code_not=code_not,
            documentdatum=documentdatum,
            documentdatum_gt=documentdatum_gt,
            documentdatum_gte=documentdatum_gte,
            documentdatum_in=documentdatum_in,
            documentdatum_isnull=documentdatum_isnull,
            documentdatum_lt=documentdatum_lt,
            documentdatum_lte=documentdatum_lte,
            documentdatum_not=documentdatum_not,
            documentnummer=documentnummer,
            documentnummer_in=documentnummer_in,
            documentnummer_isempty=documentnummer_isempty,
            documentnummer_isnull=documentnummer_isnull,
            documentnummer_like=documentnummer_like,
            documentnummer_not=documentnummer_not,
            eind_geldigheid=eind_geldigheid,
            eind_geldigheid_gt=eind_geldigheid_gt,
            eind_geldigheid_gte=eind_geldigheid_gte,
            eind_geldigheid_in=eind_geldigheid_in,
            eind_geldigheid_isnull=eind_geldigheid_isnull,
            eind_geldigheid_lt=eind_geldigheid_lt,
            eind_geldigheid_lte=eind_geldigheid_lte,
            eind_geldigheid_not=eind_geldigheid_not,
            geldig_op=geldig_op,
            geldig_op_gt=geldig_op_gt,
            geldig_op_gte=geldig_op_gte,
            geldig_op_in=geldig_op_in,
            geldig_op_isnull=geldig_op_isnull,
            geldig_op_lt=geldig_op_lt,
            geldig_op_lte=geldig_op_lte,
            geldig_op_not=geldig_op_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            id2=id2,
            id_in=id_in,
            id_isempty=id_isempty,
            id_isnull=id_isnull,
            id_like=id_like,
            id_not=id_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            ligt_in_stadsdeel_identificatie=ligt_in_stadsdeel_identificatie,
            ligt_in_stadsdeel_identificatie_in=ligt_in_stadsdeel_identificatie_in,
            ligt_in_stadsdeel_identificatie_isempty=ligt_in_stadsdeel_identificatie_isempty,
            ligt_in_stadsdeel_identificatie_isnull=ligt_in_stadsdeel_identificatie_isnull,
            ligt_in_stadsdeel_identificatie_like=ligt_in_stadsdeel_identificatie_like,
            ligt_in_stadsdeel_identificatie_not=ligt_in_stadsdeel_identificatie_not,
            ligt_in_stadsdeel_volgnummer=ligt_in_stadsdeel_volgnummer,
            ligt_in_stadsdeel_volgnummer_gt=ligt_in_stadsdeel_volgnummer_gt,
            ligt_in_stadsdeel_volgnummer_gte=ligt_in_stadsdeel_volgnummer_gte,
            ligt_in_stadsdeel_volgnummer_in=ligt_in_stadsdeel_volgnummer_in,
            ligt_in_stadsdeel_volgnummer_isnull=ligt_in_stadsdeel_volgnummer_isnull,
            ligt_in_stadsdeel_volgnummer_lt=ligt_in_stadsdeel_volgnummer_lt,
            ligt_in_stadsdeel_volgnummer_lte=ligt_in_stadsdeel_volgnummer_lte,
            ligt_in_stadsdeel_volgnummer_not=ligt_in_stadsdeel_volgnummer_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            registratiedatum=registratiedatum,
            registratiedatum_gt=registratiedatum_gt,
            registratiedatum_gte=registratiedatum_gte,
            registratiedatum_in=registratiedatum_in,
            registratiedatum_isnull=registratiedatum_isnull,
            registratiedatum_lt=registratiedatum_lt,
            registratiedatum_lte=registratiedatum_lte,
            registratiedatum_not=registratiedatum_not,
            volgnummer=volgnummer,
            volgnummer_gt=volgnummer_gt,
            volgnummer_gte=volgnummer_gte,
            volgnummer_in=volgnummer_in,
            volgnummer_isnull=volgnummer_isnull,
            volgnummer_lt=volgnummer_lt,
            volgnummer_lte=volgnummer_lte,
            volgnummer_not=volgnummer_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenggwgebieden",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gebieden_ggwgebieden_retrieve_serialize(
        self,
        id,
        accept_crs,
        content_crs,
        x_api_key,
        expand,
        expand_scope,
        fields,
        format,
        sort,
        begin_geldigheid,
        begin_geldigheid_gt,
        begin_geldigheid_gte,
        begin_geldigheid_in,
        begin_geldigheid_isnull,
        begin_geldigheid_lt,
        begin_geldigheid_lte,
        begin_geldigheid_not,
        bestaat_uit_buurten_identificatie,
        bestaat_uit_buurten_identificatie_in,
        bestaat_uit_buurten_identificatie_isempty,
        bestaat_uit_buurten_identificatie_isnull,
        bestaat_uit_buurten_identificatie_like,
        bestaat_uit_buurten_identificatie_not,
        bestaat_uit_buurten_volgnummer,
        bestaat_uit_buurten_volgnummer_gt,
        bestaat_uit_buurten_volgnummer_gte,
        bestaat_uit_buurten_volgnummer_in,
        bestaat_uit_buurten_volgnummer_isnull,
        bestaat_uit_buurten_volgnummer_lt,
        bestaat_uit_buurten_volgnummer_lte,
        bestaat_uit_buurten_volgnummer_not,
        code,
        code_in,
        code_isempty,
        code_isnull,
        code_like,
        code_not,
        documentdatum,
        documentdatum_gt,
        documentdatum_gte,
        documentdatum_in,
        documentdatum_isnull,
        documentdatum_lt,
        documentdatum_lte,
        documentdatum_not,
        documentnummer,
        documentnummer_in,
        documentnummer_isempty,
        documentnummer_isnull,
        documentnummer_like,
        documentnummer_not,
        eind_geldigheid,
        eind_geldigheid_gt,
        eind_geldigheid_gte,
        eind_geldigheid_in,
        eind_geldigheid_isnull,
        eind_geldigheid_lt,
        eind_geldigheid_lte,
        eind_geldigheid_not,
        geldig_op,
        geldig_op_gt,
        geldig_op_gte,
        geldig_op_in,
        geldig_op_isnull,
        geldig_op_lt,
        geldig_op_lte,
        geldig_op_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        id2,
        id_in,
        id_isempty,
        id_isnull,
        id_like,
        id_not,
        identificatie,
        identificatie_in,
        identificatie_isempty,
        identificatie_isnull,
        identificatie_like,
        identificatie_not,
        ligt_in_stadsdeel_identificatie,
        ligt_in_stadsdeel_identificatie_in,
        ligt_in_stadsdeel_identificatie_isempty,
        ligt_in_stadsdeel_identificatie_isnull,
        ligt_in_stadsdeel_identificatie_like,
        ligt_in_stadsdeel_identificatie_not,
        ligt_in_stadsdeel_volgnummer,
        ligt_in_stadsdeel_volgnummer_gt,
        ligt_in_stadsdeel_volgnummer_gte,
        ligt_in_stadsdeel_volgnummer_in,
        ligt_in_stadsdeel_volgnummer_isnull,
        ligt_in_stadsdeel_volgnummer_lt,
        ligt_in_stadsdeel_volgnummer_lte,
        ligt_in_stadsdeel_volgnummer_not,
        naam,
        naam_in,
        naam_isempty,
        naam_isnull,
        naam_like,
        naam_not,
        registratiedatum,
        registratiedatum_gt,
        registratiedatum_gte,
        registratiedatum_in,
        registratiedatum_isnull,
        registratiedatum_lt,
        registratiedatum_lte,
        registratiedatum_not,
        volgnummer,
        volgnummer_gt,
        volgnummer_gte,
        volgnummer_in,
        volgnummer_isnull,
        volgnummer_lt,
        volgnummer_lte,
        volgnummer_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'beginGeldigheid[in]': 'csv',
            'beginGeldigheid[not]': 'multi',
            'bestaatUitBuurten.identificatie[in]': 'csv',
            'bestaatUitBuurten.identificatie[not]': 'multi',
            'bestaatUitBuurten.volgnummer[in]': 'csv',
            'bestaatUitBuurten.volgnummer[not]': 'multi',
            'code[in]': 'csv',
            'code[not]': 'multi',
            'documentdatum[in]': 'csv',
            'documentdatum[not]': 'multi',
            'documentnummer[in]': 'csv',
            'documentnummer[not]': 'multi',
            'eindGeldigheid[in]': 'csv',
            'eindGeldigheid[not]': 'multi',
            'id[in]': 'csv',
            'id[not]': 'multi',
            'identificatie[in]': 'csv',
            'identificatie[not]': 'multi',
            'ligtInStadsdeel.identificatie[in]': 'csv',
            'ligtInStadsdeel.identificatie[not]': 'multi',
            'ligtInStadsdeel.volgnummer[in]': 'csv',
            'ligtInStadsdeel.volgnummer[not]': 'multi',
            'naam[in]': 'csv',
            'naam[not]': 'multi',
            'registratiedatum[in]': 'csv',
            'registratiedatum[not]': 'multi',
            'volgnummer[in]': 'csv',
            'volgnummer[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if begin_geldigheid is not None:
            if isinstance(begin_geldigheid, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid',
                        begin_geldigheid.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid', begin_geldigheid))
            
        if begin_geldigheid_gt is not None:
            if isinstance(begin_geldigheid_gt, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[gt]',
                        begin_geldigheid_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[gt]', begin_geldigheid_gt))
            
        if begin_geldigheid_gte is not None:
            if isinstance(begin_geldigheid_gte, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[gte]',
                        begin_geldigheid_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[gte]', begin_geldigheid_gte))
            
        if begin_geldigheid_in is not None:
            
            _query_params.append(('beginGeldigheid[in]', begin_geldigheid_in))
            
        if begin_geldigheid_isnull is not None:
            
            _query_params.append(('beginGeldigheid[isnull]', begin_geldigheid_isnull))
            
        if begin_geldigheid_lt is not None:
            if isinstance(begin_geldigheid_lt, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[lt]',
                        begin_geldigheid_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[lt]', begin_geldigheid_lt))
            
        if begin_geldigheid_lte is not None:
            if isinstance(begin_geldigheid_lte, datetime):
                _query_params.append(
                    (
                        'beginGeldigheid[lte]',
                        begin_geldigheid_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('beginGeldigheid[lte]', begin_geldigheid_lte))
            
        if begin_geldigheid_not is not None:
            
            _query_params.append(('beginGeldigheid[not]', begin_geldigheid_not))
            
        if bestaat_uit_buurten_identificatie is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie', bestaat_uit_buurten_identificatie))
            
        if bestaat_uit_buurten_identificatie_in is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[in]', bestaat_uit_buurten_identificatie_in))
            
        if bestaat_uit_buurten_identificatie_isempty is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[isempty]', bestaat_uit_buurten_identificatie_isempty))
            
        if bestaat_uit_buurten_identificatie_isnull is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[isnull]', bestaat_uit_buurten_identificatie_isnull))
            
        if bestaat_uit_buurten_identificatie_like is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[like]', bestaat_uit_buurten_identificatie_like))
            
        if bestaat_uit_buurten_identificatie_not is not None:
            
            _query_params.append(('bestaatUitBuurten.identificatie[not]', bestaat_uit_buurten_identificatie_not))
            
        if bestaat_uit_buurten_volgnummer is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer', bestaat_uit_buurten_volgnummer))
            
        if bestaat_uit_buurten_volgnummer_gt is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[gt]', bestaat_uit_buurten_volgnummer_gt))
            
        if bestaat_uit_buurten_volgnummer_gte is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[gte]', bestaat_uit_buurten_volgnummer_gte))
            
        if bestaat_uit_buurten_volgnummer_in is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[in]', bestaat_uit_buurten_volgnummer_in))
            
        if bestaat_uit_buurten_volgnummer_isnull is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[isnull]', bestaat_uit_buurten_volgnummer_isnull))
            
        if bestaat_uit_buurten_volgnummer_lt is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[lt]', bestaat_uit_buurten_volgnummer_lt))
            
        if bestaat_uit_buurten_volgnummer_lte is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[lte]', bestaat_uit_buurten_volgnummer_lte))
            
        if bestaat_uit_buurten_volgnummer_not is not None:
            
            _query_params.append(('bestaatUitBuurten.volgnummer[not]', bestaat_uit_buurten_volgnummer_not))
            
        if code is not None:
            
            _query_params.append(('code', code))
            
        if code_in is not None:
            
            _query_params.append(('code[in]', code_in))
            
        if code_isempty is not None:
            
            _query_params.append(('code[isempty]', code_isempty))
            
        if code_isnull is not None:
            
            _query_params.append(('code[isnull]', code_isnull))
            
        if code_like is not None:
            
            _query_params.append(('code[like]', code_like))
            
        if code_not is not None:
            
            _query_params.append(('code[not]', code_not))
            
        if documentdatum is not None:
            if isinstance(documentdatum, date):
                _query_params.append(
                    (
                        'documentdatum',
                        documentdatum.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum', documentdatum))
            
        if documentdatum_gt is not None:
            if isinstance(documentdatum_gt, date):
                _query_params.append(
                    (
                        'documentdatum[gt]',
                        documentdatum_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[gt]', documentdatum_gt))
            
        if documentdatum_gte is not None:
            if isinstance(documentdatum_gte, date):
                _query_params.append(
                    (
                        'documentdatum[gte]',
                        documentdatum_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[gte]', documentdatum_gte))
            
        if documentdatum_in is not None:
            
            _query_params.append(('documentdatum[in]', documentdatum_in))
            
        if documentdatum_isnull is not None:
            
            _query_params.append(('documentdatum[isnull]', documentdatum_isnull))
            
        if documentdatum_lt is not None:
            if isinstance(documentdatum_lt, date):
                _query_params.append(
                    (
                        'documentdatum[lt]',
                        documentdatum_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[lt]', documentdatum_lt))
            
        if documentdatum_lte is not None:
            if isinstance(documentdatum_lte, date):
                _query_params.append(
                    (
                        'documentdatum[lte]',
                        documentdatum_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('documentdatum[lte]', documentdatum_lte))
            
        if documentdatum_not is not None:
            
            _query_params.append(('documentdatum[not]', documentdatum_not))
            
        if documentnummer is not None:
            
            _query_params.append(('documentnummer', documentnummer))
            
        if documentnummer_in is not None:
            
            _query_params.append(('documentnummer[in]', documentnummer_in))
            
        if documentnummer_isempty is not None:
            
            _query_params.append(('documentnummer[isempty]', documentnummer_isempty))
            
        if documentnummer_isnull is not None:
            
            _query_params.append(('documentnummer[isnull]', documentnummer_isnull))
            
        if documentnummer_like is not None:
            
            _query_params.append(('documentnummer[like]', documentnummer_like))
            
        if documentnummer_not is not None:
            
            _query_params.append(('documentnummer[not]', documentnummer_not))
            
        if eind_geldigheid is not None:
            if isinstance(eind_geldigheid, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid',
                        eind_geldigheid.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid', eind_geldigheid))
            
        if eind_geldigheid_gt is not None:
            if isinstance(eind_geldigheid_gt, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[gt]',
                        eind_geldigheid_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[gt]', eind_geldigheid_gt))
            
        if eind_geldigheid_gte is not None:
            if isinstance(eind_geldigheid_gte, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[gte]',
                        eind_geldigheid_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[gte]', eind_geldigheid_gte))
            
        if eind_geldigheid_in is not None:
            
            _query_params.append(('eindGeldigheid[in]', eind_geldigheid_in))
            
        if eind_geldigheid_isnull is not None:
            
            _query_params.append(('eindGeldigheid[isnull]', eind_geldigheid_isnull))
            
        if eind_geldigheid_lt is not None:
            if isinstance(eind_geldigheid_lt, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[lt]',
                        eind_geldigheid_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[lt]', eind_geldigheid_lt))
            
        if eind_geldigheid_lte is not None:
            if isinstance(eind_geldigheid_lte, datetime):
                _query_params.append(
                    (
                        'eindGeldigheid[lte]',
                        eind_geldigheid_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('eindGeldigheid[lte]', eind_geldigheid_lte))
            
        if eind_geldigheid_not is not None:
            
            _query_params.append(('eindGeldigheid[not]', eind_geldigheid_not))
            
        if geldig_op is not None:
            if isinstance(geldig_op, datetime):
                _query_params.append(
                    (
                        'geldigOp',
                        geldig_op.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp', geldig_op))
            
        if geldig_op_gt is not None:
            if isinstance(geldig_op_gt, datetime):
                _query_params.append(
                    (
                        'geldigOp[gt]',
                        geldig_op_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[gt]', geldig_op_gt))
            
        if geldig_op_gte is not None:
            if isinstance(geldig_op_gte, datetime):
                _query_params.append(
                    (
                        'geldigOp[gte]',
                        geldig_op_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[gte]', geldig_op_gte))
            
        if geldig_op_in is not None:
            if isinstance(geldig_op_in, datetime):
                _query_params.append(
                    (
                        'geldigOp[in]',
                        geldig_op_in.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[in]', geldig_op_in))
            
        if geldig_op_isnull is not None:
            if isinstance(geldig_op_isnull, datetime):
                _query_params.append(
                    (
                        'geldigOp[isnull]',
                        geldig_op_isnull.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[isnull]', geldig_op_isnull))
            
        if geldig_op_lt is not None:
            if isinstance(geldig_op_lt, datetime):
                _query_params.append(
                    (
                        'geldigOp[lt]',
                        geldig_op_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[lt]', geldig_op_lt))
            
        if geldig_op_lte is not None:
            if isinstance(geldig_op_lte, datetime):
                _query_params.append(
                    (
                        'geldigOp[lte]',
                        geldig_op_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[lte]', geldig_op_lte))
            
        if geldig_op_not is not None:
            if isinstance(geldig_op_not, datetime):
                _query_params.append(
                    (
                        'geldigOp[not]',
                        geldig_op_not.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('geldigOp[not]', geldig_op_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if id2 is not None:
            
            _query_params.append(('id', id2))
            
        if id_in is not None:
            
            _query_params.append(('id[in]', id_in))
            
        if id_isempty is not None:
            
            _query_params.append(('id[isempty]', id_isempty))
            
        if id_isnull is not None:
            
            _query_params.append(('id[isnull]', id_isnull))
            
        if id_like is not None:
            
            _query_params.append(('id[like]', id_like))
            
        if id_not is not None:
            
            _query_params.append(('id[not]', id_not))
            
        if identificatie is not None:
            
            _query_params.append(('identificatie', identificatie))
            
        if identificatie_in is not None:
            
            _query_params.append(('identificatie[in]', identificatie_in))
            
        if identificatie_isempty is not None:
            
            _query_params.append(('identificatie[isempty]', identificatie_isempty))
            
        if identificatie_isnull is not None:
            
            _query_params.append(('identificatie[isnull]', identificatie_isnull))
            
        if identificatie_like is not None:
            
            _query_params.append(('identificatie[like]', identificatie_like))
            
        if identificatie_not is not None:
            
            _query_params.append(('identificatie[not]', identificatie_not))
            
        if ligt_in_stadsdeel_identificatie is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie', ligt_in_stadsdeel_identificatie))
            
        if ligt_in_stadsdeel_identificatie_in is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[in]', ligt_in_stadsdeel_identificatie_in))
            
        if ligt_in_stadsdeel_identificatie_isempty is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[isempty]', ligt_in_stadsdeel_identificatie_isempty))
            
        if ligt_in_stadsdeel_identificatie_isnull is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[isnull]', ligt_in_stadsdeel_identificatie_isnull))
            
        if ligt_in_stadsdeel_identificatie_like is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[like]', ligt_in_stadsdeel_identificatie_like))
            
        if ligt_in_stadsdeel_identificatie_not is not None:
            
            _query_params.append(('ligtInStadsdeel.identificatie[not]', ligt_in_stadsdeel_identificatie_not))
            
        if ligt_in_stadsdeel_volgnummer is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer', ligt_in_stadsdeel_volgnummer))
            
        if ligt_in_stadsdeel_volgnummer_gt is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[gt]', ligt_in_stadsdeel_volgnummer_gt))
            
        if ligt_in_stadsdeel_volgnummer_gte is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[gte]', ligt_in_stadsdeel_volgnummer_gte))
            
        if ligt_in_stadsdeel_volgnummer_in is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[in]', ligt_in_stadsdeel_volgnummer_in))
            
        if ligt_in_stadsdeel_volgnummer_isnull is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[isnull]', ligt_in_stadsdeel_volgnummer_isnull))
            
        if ligt_in_stadsdeel_volgnummer_lt is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[lt]', ligt_in_stadsdeel_volgnummer_lt))
            
        if ligt_in_stadsdeel_volgnummer_lte is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[lte]', ligt_in_stadsdeel_volgnummer_lte))
            
        if ligt_in_stadsdeel_volgnummer_not is not None:
            
            _query_params.append(('ligtInStadsdeel.volgnummer[not]', ligt_in_stadsdeel_volgnummer_not))
            
        if naam is not None:
            
            _query_params.append(('naam', naam))
            
        if naam_in is not None:
            
            _query_params.append(('naam[in]', naam_in))
            
        if naam_isempty is not None:
            
            _query_params.append(('naam[isempty]', naam_isempty))
            
        if naam_isnull is not None:
            
            _query_params.append(('naam[isnull]', naam_isnull))
            
        if naam_like is not None:
            
            _query_params.append(('naam[like]', naam_like))
            
        if naam_not is not None:
            
            _query_params.append(('naam[not]', naam_not))
            
        if registratiedatum is not None:
            if isinstance(registratiedatum, datetime):
                _query_params.append(
                    (
                        'registratiedatum',
                        registratiedatum.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum', registratiedatum))
            
        if registratiedatum_gt is not None:
            if isinstance(registratiedatum_gt, datetime):
                _query_params.append(
                    (
                        'registratiedatum[gt]',
                        registratiedatum_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[gt]', registratiedatum_gt))
            
        if registratiedatum_gte is not None:
            if isinstance(registratiedatum_gte, datetime):
                _query_params.append(
                    (
                        'registratiedatum[gte]',
                        registratiedatum_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[gte]', registratiedatum_gte))
            
        if registratiedatum_in is not None:
            
            _query_params.append(('registratiedatum[in]', registratiedatum_in))
            
        if registratiedatum_isnull is not None:
            
            _query_params.append(('registratiedatum[isnull]', registratiedatum_isnull))
            
        if registratiedatum_lt is not None:
            if isinstance(registratiedatum_lt, datetime):
                _query_params.append(
                    (
                        'registratiedatum[lt]',
                        registratiedatum_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[lt]', registratiedatum_lt))
            
        if registratiedatum_lte is not None:
            if isinstance(registratiedatum_lte, datetime):
                _query_params.append(
                    (
                        'registratiedatum[lte]',
                        registratiedatum_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('registratiedatum[lte]', registratiedatum_lte))
            
        if registratiedatum_not is not None:
            
            _query_params.append(('registratiedatum[not]', registratiedatum_not))
            
        if volgnummer is not None:
            
            _query_params.append(('volgnummer', volgnummer))
            
        if volgnummer_gt is not None:
            
            _query_params.append(('volgnummer[gt]', volgnummer_gt))
            
        if volgnummer_gte is not None:
            
            _query_params.append(('volgnummer[gte]', volgnummer_gte))
            
        if volgnummer_in is not None:
            
            _query_params.append(('volgnummer[in]', volgnummer_in))
            
        if volgnummer_isnull is not None:
            
            _query_params.append(('volgnummer[isnull]', volgnummer_isnull))
            
        if volgnummer_lt is not None:
            
            _query_params.append(('volgnummer[lt]', volgnummer_lt))
            
        if volgnummer_lte is not None:
            
            _query_params.append(('volgnummer[lte]', volgnummer_lte))
            
        if volgnummer_not is not None:
            
            _query_params.append(('volgnummer[not]', volgnummer_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gebieden/ggwgebieden/{id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


