# coding: utf-8

"""
    gebieden

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from gebieden_api_client.models.gebiedenstedelijkgebiedprojectofbelangen import Gebiedenstedelijkgebiedprojectofbelangen
from gebieden_api_client.models.paginated_gebiedenstedelijkgebiedprojectofbelangen_list import PaginatedGebiedenstedelijkgebiedprojectofbelangenList

from gebieden_api_client.api_client import ApiClient, RequestSerialized
from gebieden_api_client.api_response import ApiResponse
from gebieden_api_client.rest import RESTResponseType


class StedelijkgebiedprojectofbelangenApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_list(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedGebiedenstedelijkgebiedprojectofbelangenList:
        """gebieden_stedelijkgebiedprojectofbelangen_list

        Stedelijke gebieden, projecten en belangen zijn projectgebieden binnen de gemeente Amsterdam, waar de voorbereiding van bestemmingsplannen door het college van burgemeester en wethouders of de burgemeester ter hand worden genomen

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenstedelijkgebiedprojectofbelangenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_list_with_http_info(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedGebiedenstedelijkgebiedprojectofbelangenList]:
        """gebieden_stedelijkgebiedprojectofbelangen_list

        Stedelijke gebieden, projecten en belangen zijn projectgebieden binnen de gemeente Amsterdam, waar de voorbereiding van bestemmingsplannen door het college van burgemeester en wethouders of de burgemeester ter hand worden genomen

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenstedelijkgebiedprojectofbelangenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_list_without_preload_content(
        self,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        count: Annotated[Optional[StrictBool], Field(description="Include a count of the total result set and the number of pages.Only works for responses that return a page.")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gebieden_stedelijkgebiedprojectofbelangen_list

        Stedelijke gebieden, projecten en belangen zijn projectgebieden binnen de gemeente Amsterdam, waar de voorbereiding van bestemmingsplannen door het college van burgemeester en wethouders of de burgemeester ter hand worden genomen

        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param count: Include a count of the total result set and the number of pages.Only works for responses that return a page.
        :type count: bool
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie: Unieke identificatie van het object
        :type identificatie: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_list_serialize(
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            count=count,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            page_size=page_size,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie=identificatie,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            page=page,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedGebiedenstedelijkgebiedprojectofbelangenList",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gebieden_stedelijkgebiedprojectofbelangen_list_serialize(
        self,
        accept_crs,
        content_crs,
        x_api_key,
        count,
        expand,
        expand_scope,
        fields,
        format,
        page_size,
        sort,
        datum,
        datum_actueel_tot,
        datum_actueel_tot_gt,
        datum_actueel_tot_gte,
        datum_actueel_tot_in,
        datum_actueel_tot_isnull,
        datum_actueel_tot_lt,
        datum_actueel_tot_lte,
        datum_actueel_tot_not,
        datum_gt,
        datum_gte,
        datum_in,
        datum_isnull,
        datum_lt,
        datum_lte,
        datum_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        identificatie,
        identificatie_in,
        identificatie_isempty,
        identificatie_isnull,
        identificatie_like,
        identificatie_not,
        legenda,
        legenda_in,
        legenda_isempty,
        legenda_isnull,
        legenda_like,
        legenda_not,
        naam,
        naam_in,
        naam_isempty,
        naam_isnull,
        naam_like,
        naam_not,
        page,
        url,
        url_in,
        url_isempty,
        url_isnull,
        url_like,
        url_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'datumActueelTot[in]': 'csv',
            'datumActueelTot[not]': 'multi',
            'datum[in]': 'csv',
            'datum[not]': 'multi',
            'identificatie[in]': 'csv',
            'identificatie[not]': 'multi',
            'legenda[in]': 'csv',
            'legenda[not]': 'multi',
            'naam[in]': 'csv',
            'naam[not]': 'multi',
            'url[in]': 'csv',
            'url[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('_count', count))
            
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if page_size is not None:
            
            _query_params.append(('_pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if datum is not None:
            if isinstance(datum, date):
                _query_params.append(
                    (
                        'datum',
                        datum.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum', datum))
            
        if datum_actueel_tot is not None:
            if isinstance(datum_actueel_tot, datetime):
                _query_params.append(
                    (
                        'datumActueelTot',
                        datum_actueel_tot.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot', datum_actueel_tot))
            
        if datum_actueel_tot_gt is not None:
            if isinstance(datum_actueel_tot_gt, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[gt]',
                        datum_actueel_tot_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[gt]', datum_actueel_tot_gt))
            
        if datum_actueel_tot_gte is not None:
            if isinstance(datum_actueel_tot_gte, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[gte]',
                        datum_actueel_tot_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[gte]', datum_actueel_tot_gte))
            
        if datum_actueel_tot_in is not None:
            
            _query_params.append(('datumActueelTot[in]', datum_actueel_tot_in))
            
        if datum_actueel_tot_isnull is not None:
            
            _query_params.append(('datumActueelTot[isnull]', datum_actueel_tot_isnull))
            
        if datum_actueel_tot_lt is not None:
            if isinstance(datum_actueel_tot_lt, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[lt]',
                        datum_actueel_tot_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[lt]', datum_actueel_tot_lt))
            
        if datum_actueel_tot_lte is not None:
            if isinstance(datum_actueel_tot_lte, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[lte]',
                        datum_actueel_tot_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[lte]', datum_actueel_tot_lte))
            
        if datum_actueel_tot_not is not None:
            
            _query_params.append(('datumActueelTot[not]', datum_actueel_tot_not))
            
        if datum_gt is not None:
            if isinstance(datum_gt, date):
                _query_params.append(
                    (
                        'datum[gt]',
                        datum_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[gt]', datum_gt))
            
        if datum_gte is not None:
            if isinstance(datum_gte, date):
                _query_params.append(
                    (
                        'datum[gte]',
                        datum_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[gte]', datum_gte))
            
        if datum_in is not None:
            
            _query_params.append(('datum[in]', datum_in))
            
        if datum_isnull is not None:
            
            _query_params.append(('datum[isnull]', datum_isnull))
            
        if datum_lt is not None:
            if isinstance(datum_lt, date):
                _query_params.append(
                    (
                        'datum[lt]',
                        datum_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[lt]', datum_lt))
            
        if datum_lte is not None:
            if isinstance(datum_lte, date):
                _query_params.append(
                    (
                        'datum[lte]',
                        datum_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[lte]', datum_lte))
            
        if datum_not is not None:
            
            _query_params.append(('datum[not]', datum_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if identificatie is not None:
            
            _query_params.append(('identificatie', identificatie))
            
        if identificatie_in is not None:
            
            _query_params.append(('identificatie[in]', identificatie_in))
            
        if identificatie_isempty is not None:
            
            _query_params.append(('identificatie[isempty]', identificatie_isempty))
            
        if identificatie_isnull is not None:
            
            _query_params.append(('identificatie[isnull]', identificatie_isnull))
            
        if identificatie_like is not None:
            
            _query_params.append(('identificatie[like]', identificatie_like))
            
        if identificatie_not is not None:
            
            _query_params.append(('identificatie[not]', identificatie_not))
            
        if legenda is not None:
            
            _query_params.append(('legenda', legenda))
            
        if legenda_in is not None:
            
            _query_params.append(('legenda[in]', legenda_in))
            
        if legenda_isempty is not None:
            
            _query_params.append(('legenda[isempty]', legenda_isempty))
            
        if legenda_isnull is not None:
            
            _query_params.append(('legenda[isnull]', legenda_isnull))
            
        if legenda_like is not None:
            
            _query_params.append(('legenda[like]', legenda_like))
            
        if legenda_not is not None:
            
            _query_params.append(('legenda[not]', legenda_not))
            
        if naam is not None:
            
            _query_params.append(('naam', naam))
            
        if naam_in is not None:
            
            _query_params.append(('naam[in]', naam_in))
            
        if naam_isempty is not None:
            
            _query_params.append(('naam[isempty]', naam_isempty))
            
        if naam_isnull is not None:
            
            _query_params.append(('naam[isnull]', naam_isnull))
            
        if naam_like is not None:
            
            _query_params.append(('naam[like]', naam_like))
            
        if naam_not is not None:
            
            _query_params.append(('naam[not]', naam_not))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if url_in is not None:
            
            _query_params.append(('url[in]', url_in))
            
        if url_isempty is not None:
            
            _query_params.append(('url[isempty]', url_isempty))
            
        if url_isnull is not None:
            
            _query_params.append(('url[isnull]', url_isnull))
            
        if url_like is not None:
            
            _query_params.append(('url[like]', url_like))
            
        if url_not is not None:
            
            _query_params.append(('url[not]', url_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gebieden/stedelijkgebiedprojectofbelangen/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_retrieve(
        self,
        identificatie: StrictStr,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie2: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Gebiedenstedelijkgebiedprojectofbelangen:
        """gebieden_stedelijkgebiedprojectofbelangen_retrieve


        :param identificatie: (required)
        :type identificatie: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie2: Unieke identificatie van het object
        :type identificatie2: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_retrieve_serialize(
            identificatie=identificatie,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie2=identificatie2,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenstedelijkgebiedprojectofbelangen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_retrieve_with_http_info(
        self,
        identificatie: StrictStr,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie2: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Gebiedenstedelijkgebiedprojectofbelangen]:
        """gebieden_stedelijkgebiedprojectofbelangen_retrieve


        :param identificatie: (required)
        :type identificatie: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie2: Unieke identificatie van het object
        :type identificatie2: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_retrieve_serialize(
            identificatie=identificatie,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie2=identificatie2,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenstedelijkgebiedprojectofbelangen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def gebieden_stedelijkgebiedprojectofbelangen_retrieve_without_preload_content(
        self,
        identificatie: StrictStr,
        accept_crs: Annotated[Optional[StrictStr], Field(description="Accept-Crs header for Geo queries")] = None,
        content_crs: Annotated[Optional[StrictStr], Field(description="Content-Crs header for Geo queries")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Api Key for statistical purposes, not for authentication")] = None,
        expand: Annotated[Optional[StrictBool], Field(description="Allow to expand relations.")] = None,
        expand_scope: Annotated[Optional[StrictStr], Field(description="Comma separated list of named relations to expand.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to display")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Select the export format")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None,
        datum: Annotated[Optional[date], Field(description="Wordt nog aangevuld")] = None,
        datum_actueel_tot: Annotated[Optional[datetime], Field(description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status")] = None,
        datum_actueel_tot_gt: Annotated[Optional[datetime], Field(description="Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_gte: Annotated[Optional[datetime], Field(description="Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_in: Annotated[Optional[List[datetime]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_actueel_tot_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_actueel_tot_lt: Annotated[Optional[datetime], Field(description="Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_lte: Annotated[Optional[datetime], Field(description="Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_actueel_tot_not: Annotated[Optional[List[datetime]], Field(description="Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]")] = None,
        datum_gt: Annotated[Optional[date], Field(description="Greater than; use yyyy-mm-dd")] = None,
        datum_gte: Annotated[Optional[date], Field(description="Greater than or equal to; use yyyy-mm-dd")] = None,
        datum_in: Annotated[Optional[List[date]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        datum_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        datum_lt: Annotated[Optional[date], Field(description="Less than; use yyyy-mm-dd")] = None,
        datum_lte: Annotated[Optional[date], Field(description="Less than or equal to; use yyyy-mm-dd")] = None,
        datum_not: Annotated[Optional[List[date]], Field(description="Exclude matches; use yyyy-mm-dd")] = None,
        geometrie: Annotated[Optional[StrictStr], Field(description="Geometrische beschrijving van een object")] = None,
        geometrie_contains: Annotated[Optional[StrictStr], Field(description="Use x,y or POINT(x y)")] = None,
        geometrie_intersects: Annotated[Optional[StrictStr], Field(description="Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON")] = None,
        geometrie_isnull: Annotated[Optional[StrictStr], Field(description="Whether the field has a NULL value or not.")] = None,
        geometrie_not: Annotated[Optional[StrictStr], Field(description="GeoJSON | GEOMETRY(...)")] = None,
        identificatie2: Annotated[Optional[StrictStr], Field(description="Unieke identificatie van het object")] = None,
        identificatie_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        identificatie_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        identificatie_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        identificatie_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        identificatie_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        legenda: Annotated[Optional[StrictStr], Field(description="Wordt nog aangevuld")] = None,
        legenda_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        legenda_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        legenda_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        legenda_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        legenda_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        naam: Annotated[Optional[StrictStr], Field(description="De naam van het object")] = None,
        naam_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        naam_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        naam_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        naam_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        naam_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; text")] = None,
        url: Annotated[Optional[StrictStr], Field(description="URL naar bekendmaking")] = None,
        url_in: Annotated[Optional[List[StrictStr]], Field(description="Matches any value from a comma-separated list: val1,val2,valN.")] = None,
        url_isempty: Annotated[Optional[StrictBool], Field(description="Whether the field is empty or not.")] = None,
        url_isnull: Annotated[Optional[StrictBool], Field(description="Whether the field has a NULL value or not.")] = None,
        url_like: Annotated[Optional[StrictStr], Field(description="Matches text using wildcards (? and *).")] = None,
        url_not: Annotated[Optional[List[StrictStr]], Field(description="Exclude matches; URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """gebieden_stedelijkgebiedprojectofbelangen_retrieve


        :param identificatie: (required)
        :type identificatie: str
        :param accept_crs: Accept-Crs header for Geo queries
        :type accept_crs: str
        :param content_crs: Content-Crs header for Geo queries
        :type content_crs: str
        :param x_api_key: Api Key for statistical purposes, not for authentication
        :type x_api_key: str
        :param expand: Allow to expand relations.
        :type expand: bool
        :param expand_scope: Comma separated list of named relations to expand.
        :type expand_scope: str
        :param fields: Comma-separated list of fields to display
        :type fields: str
        :param format: Select the export format
        :type format: str
        :param sort: Which field to use when ordering the results.
        :type sort: str
        :param datum: Wordt nog aangevuld
        :type datum: date
        :param datum_actueel_tot: Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status
        :type datum_actueel_tot: datetime
        :param datum_actueel_tot_gt: Greater than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gt: datetime
        :param datum_actueel_tot_gte: Greater than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_gte: datetime
        :param datum_actueel_tot_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_actueel_tot_in: List[datetime]
        :param datum_actueel_tot_isnull: Whether the field has a NULL value or not.
        :type datum_actueel_tot_isnull: bool
        :param datum_actueel_tot_lt: Less than; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lt: datetime
        :param datum_actueel_tot_lte: Less than or equal to; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_lte: datetime
        :param datum_actueel_tot_not: Exclude matches; use yyyy-mm-dd or yyyy-mm-ddThh:mm[:ss[.ms]]
        :type datum_actueel_tot_not: List[datetime]
        :param datum_gt: Greater than; use yyyy-mm-dd
        :type datum_gt: date
        :param datum_gte: Greater than or equal to; use yyyy-mm-dd
        :type datum_gte: date
        :param datum_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type datum_in: List[date]
        :param datum_isnull: Whether the field has a NULL value or not.
        :type datum_isnull: bool
        :param datum_lt: Less than; use yyyy-mm-dd
        :type datum_lt: date
        :param datum_lte: Less than or equal to; use yyyy-mm-dd
        :type datum_lte: date
        :param datum_not: Exclude matches; use yyyy-mm-dd
        :type datum_not: List[date]
        :param geometrie: Geometrische beschrijving van een object
        :type geometrie: str
        :param geometrie_contains: Use x,y or POINT(x y)
        :type geometrie_contains: str
        :param geometrie_intersects: Use WKT (POLYGON((x1 y1, x2 y2, ...))) or GeoJSON
        :type geometrie_intersects: str
        :param geometrie_isnull: Whether the field has a NULL value or not.
        :type geometrie_isnull: str
        :param geometrie_not: GeoJSON | GEOMETRY(...)
        :type geometrie_not: str
        :param identificatie2: Unieke identificatie van het object
        :type identificatie2: str
        :param identificatie_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type identificatie_in: List[str]
        :param identificatie_isempty: Whether the field is empty or not.
        :type identificatie_isempty: bool
        :param identificatie_isnull: Whether the field has a NULL value or not.
        :type identificatie_isnull: bool
        :param identificatie_like: Matches text using wildcards (? and *).
        :type identificatie_like: str
        :param identificatie_not: Exclude matches; text
        :type identificatie_not: List[str]
        :param legenda: Wordt nog aangevuld
        :type legenda: str
        :param legenda_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type legenda_in: List[str]
        :param legenda_isempty: Whether the field is empty or not.
        :type legenda_isempty: bool
        :param legenda_isnull: Whether the field has a NULL value or not.
        :type legenda_isnull: bool
        :param legenda_like: Matches text using wildcards (? and *).
        :type legenda_like: str
        :param legenda_not: Exclude matches; text
        :type legenda_not: List[str]
        :param naam: De naam van het object
        :type naam: str
        :param naam_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type naam_in: List[str]
        :param naam_isempty: Whether the field is empty or not.
        :type naam_isempty: bool
        :param naam_isnull: Whether the field has a NULL value or not.
        :type naam_isnull: bool
        :param naam_like: Matches text using wildcards (? and *).
        :type naam_like: str
        :param naam_not: Exclude matches; text
        :type naam_not: List[str]
        :param url: URL naar bekendmaking
        :type url: str
        :param url_in: Matches any value from a comma-separated list: val1,val2,valN.
        :type url_in: List[str]
        :param url_isempty: Whether the field is empty or not.
        :type url_isempty: bool
        :param url_isnull: Whether the field has a NULL value or not.
        :type url_isnull: bool
        :param url_like: Matches text using wildcards (? and *).
        :type url_like: str
        :param url_not: Exclude matches; URL
        :type url_not: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._gebieden_stedelijkgebiedprojectofbelangen_retrieve_serialize(
            identificatie=identificatie,
            accept_crs=accept_crs,
            content_crs=content_crs,
            x_api_key=x_api_key,
            expand=expand,
            expand_scope=expand_scope,
            fields=fields,
            format=format,
            sort=sort,
            datum=datum,
            datum_actueel_tot=datum_actueel_tot,
            datum_actueel_tot_gt=datum_actueel_tot_gt,
            datum_actueel_tot_gte=datum_actueel_tot_gte,
            datum_actueel_tot_in=datum_actueel_tot_in,
            datum_actueel_tot_isnull=datum_actueel_tot_isnull,
            datum_actueel_tot_lt=datum_actueel_tot_lt,
            datum_actueel_tot_lte=datum_actueel_tot_lte,
            datum_actueel_tot_not=datum_actueel_tot_not,
            datum_gt=datum_gt,
            datum_gte=datum_gte,
            datum_in=datum_in,
            datum_isnull=datum_isnull,
            datum_lt=datum_lt,
            datum_lte=datum_lte,
            datum_not=datum_not,
            geometrie=geometrie,
            geometrie_contains=geometrie_contains,
            geometrie_intersects=geometrie_intersects,
            geometrie_isnull=geometrie_isnull,
            geometrie_not=geometrie_not,
            identificatie2=identificatie2,
            identificatie_in=identificatie_in,
            identificatie_isempty=identificatie_isempty,
            identificatie_isnull=identificatie_isnull,
            identificatie_like=identificatie_like,
            identificatie_not=identificatie_not,
            legenda=legenda,
            legenda_in=legenda_in,
            legenda_isempty=legenda_isempty,
            legenda_isnull=legenda_isnull,
            legenda_like=legenda_like,
            legenda_not=legenda_not,
            naam=naam,
            naam_in=naam_in,
            naam_isempty=naam_isempty,
            naam_isnull=naam_isnull,
            naam_like=naam_like,
            naam_not=naam_not,
            url=url,
            url_in=url_in,
            url_isempty=url_isempty,
            url_isnull=url_isnull,
            url_like=url_like,
            url_not=url_not,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Gebiedenstedelijkgebiedprojectofbelangen",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _gebieden_stedelijkgebiedprojectofbelangen_retrieve_serialize(
        self,
        identificatie,
        accept_crs,
        content_crs,
        x_api_key,
        expand,
        expand_scope,
        fields,
        format,
        sort,
        datum,
        datum_actueel_tot,
        datum_actueel_tot_gt,
        datum_actueel_tot_gte,
        datum_actueel_tot_in,
        datum_actueel_tot_isnull,
        datum_actueel_tot_lt,
        datum_actueel_tot_lte,
        datum_actueel_tot_not,
        datum_gt,
        datum_gte,
        datum_in,
        datum_isnull,
        datum_lt,
        datum_lte,
        datum_not,
        geometrie,
        geometrie_contains,
        geometrie_intersects,
        geometrie_isnull,
        geometrie_not,
        identificatie2,
        identificatie_in,
        identificatie_isempty,
        identificatie_isnull,
        identificatie_like,
        identificatie_not,
        legenda,
        legenda_in,
        legenda_isempty,
        legenda_isnull,
        legenda_like,
        legenda_not,
        naam,
        naam_in,
        naam_isempty,
        naam_isnull,
        naam_like,
        naam_not,
        url,
        url_in,
        url_isempty,
        url_isnull,
        url_like,
        url_not,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'datumActueelTot[in]': 'csv',
            'datumActueelTot[not]': 'multi',
            'datum[in]': 'csv',
            'datum[not]': 'multi',
            'identificatie[in]': 'csv',
            'identificatie[not]': 'multi',
            'legenda[in]': 'csv',
            'legenda[not]': 'multi',
            'naam[in]': 'csv',
            'naam[not]': 'multi',
            'url[in]': 'csv',
            'url[not]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identificatie is not None:
            _path_params['identificatie'] = identificatie
        # process the query parameters
        if expand is not None:
            
            _query_params.append(('_expand', expand))
            
        if expand_scope is not None:
            
            _query_params.append(('_expandScope', expand_scope))
            
        if fields is not None:
            
            _query_params.append(('_fields', fields))
            
        if format is not None:
            
            _query_params.append(('_format', format))
            
        if sort is not None:
            
            _query_params.append(('_sort', sort))
            
        if datum is not None:
            if isinstance(datum, date):
                _query_params.append(
                    (
                        'datum',
                        datum.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum', datum))
            
        if datum_actueel_tot is not None:
            if isinstance(datum_actueel_tot, datetime):
                _query_params.append(
                    (
                        'datumActueelTot',
                        datum_actueel_tot.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot', datum_actueel_tot))
            
        if datum_actueel_tot_gt is not None:
            if isinstance(datum_actueel_tot_gt, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[gt]',
                        datum_actueel_tot_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[gt]', datum_actueel_tot_gt))
            
        if datum_actueel_tot_gte is not None:
            if isinstance(datum_actueel_tot_gte, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[gte]',
                        datum_actueel_tot_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[gte]', datum_actueel_tot_gte))
            
        if datum_actueel_tot_in is not None:
            
            _query_params.append(('datumActueelTot[in]', datum_actueel_tot_in))
            
        if datum_actueel_tot_isnull is not None:
            
            _query_params.append(('datumActueelTot[isnull]', datum_actueel_tot_isnull))
            
        if datum_actueel_tot_lt is not None:
            if isinstance(datum_actueel_tot_lt, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[lt]',
                        datum_actueel_tot_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[lt]', datum_actueel_tot_lt))
            
        if datum_actueel_tot_lte is not None:
            if isinstance(datum_actueel_tot_lte, datetime):
                _query_params.append(
                    (
                        'datumActueelTot[lte]',
                        datum_actueel_tot_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('datumActueelTot[lte]', datum_actueel_tot_lte))
            
        if datum_actueel_tot_not is not None:
            
            _query_params.append(('datumActueelTot[not]', datum_actueel_tot_not))
            
        if datum_gt is not None:
            if isinstance(datum_gt, date):
                _query_params.append(
                    (
                        'datum[gt]',
                        datum_gt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[gt]', datum_gt))
            
        if datum_gte is not None:
            if isinstance(datum_gte, date):
                _query_params.append(
                    (
                        'datum[gte]',
                        datum_gte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[gte]', datum_gte))
            
        if datum_in is not None:
            
            _query_params.append(('datum[in]', datum_in))
            
        if datum_isnull is not None:
            
            _query_params.append(('datum[isnull]', datum_isnull))
            
        if datum_lt is not None:
            if isinstance(datum_lt, date):
                _query_params.append(
                    (
                        'datum[lt]',
                        datum_lt.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[lt]', datum_lt))
            
        if datum_lte is not None:
            if isinstance(datum_lte, date):
                _query_params.append(
                    (
                        'datum[lte]',
                        datum_lte.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('datum[lte]', datum_lte))
            
        if datum_not is not None:
            
            _query_params.append(('datum[not]', datum_not))
            
        if geometrie is not None:
            
            _query_params.append(('geometrie', geometrie))
            
        if geometrie_contains is not None:
            
            _query_params.append(('geometrie[contains]', geometrie_contains))
            
        if geometrie_intersects is not None:
            
            _query_params.append(('geometrie[intersects]', geometrie_intersects))
            
        if geometrie_isnull is not None:
            
            _query_params.append(('geometrie[isnull]', geometrie_isnull))
            
        if geometrie_not is not None:
            
            _query_params.append(('geometrie[not]', geometrie_not))
            
        if identificatie2 is not None:
            
            _query_params.append(('identificatie', identificatie2))
            
        if identificatie_in is not None:
            
            _query_params.append(('identificatie[in]', identificatie_in))
            
        if identificatie_isempty is not None:
            
            _query_params.append(('identificatie[isempty]', identificatie_isempty))
            
        if identificatie_isnull is not None:
            
            _query_params.append(('identificatie[isnull]', identificatie_isnull))
            
        if identificatie_like is not None:
            
            _query_params.append(('identificatie[like]', identificatie_like))
            
        if identificatie_not is not None:
            
            _query_params.append(('identificatie[not]', identificatie_not))
            
        if legenda is not None:
            
            _query_params.append(('legenda', legenda))
            
        if legenda_in is not None:
            
            _query_params.append(('legenda[in]', legenda_in))
            
        if legenda_isempty is not None:
            
            _query_params.append(('legenda[isempty]', legenda_isempty))
            
        if legenda_isnull is not None:
            
            _query_params.append(('legenda[isnull]', legenda_isnull))
            
        if legenda_like is not None:
            
            _query_params.append(('legenda[like]', legenda_like))
            
        if legenda_not is not None:
            
            _query_params.append(('legenda[not]', legenda_not))
            
        if naam is not None:
            
            _query_params.append(('naam', naam))
            
        if naam_in is not None:
            
            _query_params.append(('naam[in]', naam_in))
            
        if naam_isempty is not None:
            
            _query_params.append(('naam[isempty]', naam_isempty))
            
        if naam_isnull is not None:
            
            _query_params.append(('naam[isnull]', naam_isnull))
            
        if naam_like is not None:
            
            _query_params.append(('naam[like]', naam_like))
            
        if naam_not is not None:
            
            _query_params.append(('naam[not]', naam_not))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if url_in is not None:
            
            _query_params.append(('url[in]', url_in))
            
        if url_isempty is not None:
            
            _query_params.append(('url[isempty]', url_isempty))
            
        if url_isnull is not None:
            
            _query_params.append(('url[isnull]', url_isnull))
            
        if url_like is not None:
            
            _query_params.append(('url[like]', url_like))
            
        if url_not is not None:
            
            _query_params.append(('url[not]', url_not))
            
        # process the header parameters
        if accept_crs is not None:
            _header_params['Accept-Crs'] = accept_crs
        if content_crs is not None:
            _header_params['Content-Crs'] = content_crs
        if x_api_key is not None:
            _header_params['X-Api-Key'] = x_api_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json', 
                    'text/csv', 
                    'application/geo+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/gebieden/stedelijkgebiedprojectofbelangen/{identificatie}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


