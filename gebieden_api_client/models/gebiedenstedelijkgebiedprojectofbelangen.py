# coding: utf-8

"""
    gebieden

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gebieden_api_client.models.gebieden_stedelijkgebiedprojectofbelangen_links import GebiedenStedelijkgebiedprojectofbelangenLinks
from gebieden_api_client.models.multi_polygon import MultiPolygon
from typing import Optional, Set
from typing_extensions import Self

class Gebiedenstedelijkgebiedprojectofbelangen(BaseModel):
    """
    Stedelijke gebieden, projecten en belangen zijn projectgebieden binnen de gemeente Amsterdam, waar de voorbereiding van bestemmingsplannen door het college van burgemeester en wethouders of de burgemeester ter hand worden genomen
    """ # noqa: E501
    links: GebiedenStedelijkgebiedprojectofbelangenLinks = Field(alias="_links")
    identificatie: Annotated[str, Field(strict=True, max_length=2147483647)] = Field(description="Unieke identificatie van het object")
    geometrie: MultiPolygon
    naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="De naam van het object")
    categorie_code: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, alias="categorieCode")
    categorie_omschrijving: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, alias="categorieOmschrijving")
    url: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="URL naar bekendmaking")
    datum: Optional[date] = Field(default=None, description="Wordt nog aangevuld")
    datum_actueel_tot: Optional[datetime] = Field(default=None, description="Einddatum van de cyclus, eventueel in combinatie met het kenmerk Status", alias="datumActueelTot")
    legenda: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Wordt nog aangevuld")
    __properties: ClassVar[List[str]] = ["_links", "identificatie", "geometrie", "naam", "categorieCode", "categorieOmschrijving", "url", "datum", "datumActueelTot", "legenda"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Gebiedenstedelijkgebiedprojectofbelangen from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if naam (nullable) is None
        # and model_fields_set contains the field
        if self.naam is None and "naam" in self.model_fields_set:
            _dict['naam'] = None

        # set to None if categorie_code (nullable) is None
        # and model_fields_set contains the field
        if self.categorie_code is None and "categorie_code" in self.model_fields_set:
            _dict['categorieCode'] = None

        # set to None if categorie_omschrijving (nullable) is None
        # and model_fields_set contains the field
        if self.categorie_omschrijving is None and "categorie_omschrijving" in self.model_fields_set:
            _dict['categorieOmschrijving'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if datum (nullable) is None
        # and model_fields_set contains the field
        if self.datum is None and "datum" in self.model_fields_set:
            _dict['datum'] = None

        # set to None if datum_actueel_tot (nullable) is None
        # and model_fields_set contains the field
        if self.datum_actueel_tot is None and "datum_actueel_tot" in self.model_fields_set:
            _dict['datumActueelTot'] = None

        # set to None if legenda (nullable) is None
        # and model_fields_set contains the field
        if self.legenda is None and "legenda" in self.model_fields_set:
            _dict['legenda'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Gebiedenstedelijkgebiedprojectofbelangen from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": GebiedenStedelijkgebiedprojectofbelangenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "identificatie": obj.get("identificatie"),
            "geometrie": MultiPolygon.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "naam": obj.get("naam"),
            "categorieCode": obj.get("categorieCode"),
            "categorieOmschrijving": obj.get("categorieOmschrijving"),
            "url": obj.get("url"),
            "datum": obj.get("datum"),
            "datumActueelTot": obj.get("datumActueelTot"),
            "legenda": obj.get("legenda")
        })
        return _obj


