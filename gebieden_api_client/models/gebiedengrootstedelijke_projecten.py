# coding: utf-8

"""
    gebieden

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: datapunt@amsterdam.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gebieden_api_client.models.gebieden_grootstedelijke_projecten_links import GebiedenGrootstedelijkeProjectenLinks
from gebieden_api_client.models.multi_polygon import MultiPolygon
from typing import Optional, Set
from typing_extensions import Self

class GebiedengrootstedelijkeProjecten(BaseModel):
    """
    grootstedelijkeProjecten
    """ # noqa: E501
    links: GebiedenGrootstedelijkeProjectenLinks = Field(alias="_links")
    id: Annotated[int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)]
    geometrie: MultiPolygon
    naam: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = None
    type: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Categorie GSP, OD, PHS of PHSOD")
    url: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="URL naar bekendmaking")
    typering: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = Field(default=None, description="Omschrijving type")
    datum: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = None
    legenda: Optional[Annotated[str, Field(strict=True, max_length=2147483647)]] = None
    __properties: ClassVar[List[str]] = ["_links", "id", "geometrie", "naam", "type", "url", "typering", "datum", "legenda"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GebiedengrootstedelijkeProjecten from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # set to None if naam (nullable) is None
        # and model_fields_set contains the field
        if self.naam is None and "naam" in self.model_fields_set:
            _dict['naam'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if typering (nullable) is None
        # and model_fields_set contains the field
        if self.typering is None and "typering" in self.model_fields_set:
            _dict['typering'] = None

        # set to None if datum (nullable) is None
        # and model_fields_set contains the field
        if self.datum is None and "datum" in self.model_fields_set:
            _dict['datum'] = None

        # set to None if legenda (nullable) is None
        # and model_fields_set contains the field
        if self.legenda is None and "legenda" in self.model_fields_set:
            _dict['legenda'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GebiedengrootstedelijkeProjecten from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_links": GebiedenGrootstedelijkeProjectenLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "id": obj.get("id"),
            "geometrie": MultiPolygon.from_dict(obj["geometrie"]) if obj.get("geometrie") is not None else None,
            "naam": obj.get("naam"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "typering": obj.get("typering"),
            "datum": obj.get("datum"),
            "legenda": obj.get("legenda")
        })
        return _obj


